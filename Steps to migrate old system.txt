--backup old database
exec sp_rename 'Permissions', 'OldPermissions'
GO
exec sp_rename 'Users', 'OldUsers'
GO
exec sp_rename 'UserPermissions', 'OldUserPermissions'
GO
alter table OldUserPermissions drop constraint FK_UserPermissions_Permissions
GO
alter table OldUserPermissions drop constraint FK_UserPermissions_Users
GO
alter table OldUsers drop constraint PK_Users
GO
--FIXES
update [OLDUsers] set [Email] = 'claimsrep3x@optimapr.com' where id = 58
GO
update [DsKITSM].[dbo].[Requests] set RequestedByEmail = 'maria.andino@optimapr.com' where RequestedByEmail = 'maria.andino@colonialpr.com'
GO


--create users into dskautheserver
/*
INSERT INTO [DsKAuthServer2].[dbo].[Users]
([Email],[Name],[EmailConfirmed],[AccessFailedCount],[LockoutEnd],[LockoutEnabled],[HashedPassword],[Salt],[AccountCreatedDateTime],[LastPasswordChangeDateTime],[PasswordChangeDateTime],[PasswordChangeGuid],[IsEnabled])
SELECT [Email], [Name], 1, 0, NULL, 0, '3E8EB9B40829A1B73B1E1E65EAE1F9FE317B27817E0B077E3AA5D14BB383DF3B642AE73C60E79A1F5D256333F319F36813A4BF446F36BAA2E799E9420B8CEAB1',
'C6FA6A7C8C20BB61FDED712582DB7F9370263A2C2214651008FDAE3C168A3D0C471BB8D5FD5FD43F7D6255FD6C3BE35BEE21D945B500B992D6AB6CB6031443DE',
'2024-04-03 16:33:14.120','2024-04-03 16:33:14.120',NULL, NULL, 1
FROM [DsKITSM].[dbo].[OldUsers]
GO 


--TODO : Revisar id
--crear role de tech y user en DsK.AuthServer  


insert into [DsKAuthServer2].[dbo].[ApplicationRoles]
([ApplicationId],[RoleName],[RoleDescription],[IsEnabled])
VALUES (2, 'Tech', 'Tech Rol',1)
GO
insert into [DsKAuthServer2].[dbo].[ApplicationRoles]
([ApplicationId],[RoleName],[RoleDescription],[IsEnabled])
VALUES (2, 'User', 'User Rol',1)
GO

  
  --TODO : Revisar id
 --insertar en application users
insert into [DsKAuthServer2].[dbo].[ApplicationUsers]
([ApplicationId],[UserId],[LockoutEnd],[LockoutEnabled],[AccessFailedCount],[TwoFactorEnabled],[IsEnabled])
SELECT 2, id, NULL, 0, 0, 0, 1  
FROM [DsKAuthServer2].[dbo].[Users]
where id >= 3
GO

--TODO : Revisar id
--insertar rol de user a usuarios
insert into [DsKAuthServer2].[dbo].[UserRoles]
([UserId],[RoleId])
select id, 5 from 
[DsKAuthServer2].[dbo].[Users]
where id >= 3
GO


 --TODO : crear el authentication provider AD en DsK.ITSM, enabled it, prender auto register
 
 
 --TODO : Revisar id
 --insertar user mappings para users con auth prov de AD
insert into [DsKAuthServer2].[dbo].[ApplicationAuthenticationProviderUserMappings]
([ApplicationAuthenticationProviderId],[ApplicationUserId],[Username],[IsEnabled])
select 3, c.id, b.Username, 1 from [DsKAuthServer2].[dbo].[Users] a
LEFT JOIN [DsKITSM].[dbo].[OldUsers] b ON a.Email = b.Email
LEFT JOIN [DsKAuthServer2].[dbo].[ApplicationUsers] c on a.id = c.UserId and c.ApplicationId = 2
WHERE a.id >= 3
order by a.id
GO
 
*/
 
 --create new users table 
SELECT distinct
b.Id, a.[RequestedByEmail] as Email, a.[RequestedByDisplayName] as Name
INTO [DsKITSM].[dbo].[Users]
FROM [DsKITSM].[dbo].[Requests] a
LEFT JOIN [DsKAuthServer2].[dbo].[Users] b on a.RequestedByEmail = b.Email
LEFT JOIN [DsKAuthServer2].[dbo].[ApplicationUsers] c on b.Id = c.UserId and c.ApplicationId = 2
order by b.id
GO


alter table RequestAssignedHistory drop constraint FK_RequestAssignedHistory_Requests
GO
alter table RequestMessageHistory drop constraint FK_RequestMessageHistory_Requests
GO
alter table RequestStatusHistory drop constraint FK_RequestStatusHistory_Requests
GO
alter table [Requests] add UserId int
GO

UPDATE [Requests]
SET UserId = b.Id
FROM  [Requests] a
LEFT JOIN Users b on a.RequestedByEmail = b.Email
GO

alter table [Requests] add ITSystemId int
GO

UPDATE [Requests]
SET ITSystemId = b.Id
FROM  [Requests] a
LEFT JOIN ITSystems b on a.System = b.SystemName
GO


UPDATE [DsKITSM].[dbo].[ITSystems]
SET SystemName = 'VPN'
WHERE Id = 46
GO

UPDATE [DsKITSM].[dbo].[Requests]
Set ITSystemId = 46
where [ITSystemId] is null
GO
 


alter table [RequestStatusHistory] add UserId int
GO

UPDATE [RequestStatusHistory]
SET UserId = c.Id
FROM  [RequestStatusHistory] a
LEFT JOIN OldUsers b on a.[ChangedByUsername] = b.Username
LEFT JOIN Users c on b.Email = c.email
GO


alter table [RequestStatusHistory] add StatusId int
GO

UPDATE [RequestStatusHistory]
SET StatusId = b.Id
FROM  [RequestStatusHistory] a
LEFT JOIN Status b ON a.status = b.StatusName
GO


alter table [RequestAssignedHistory] add [UserId] int
GO

UPDATE [RequestAssignedHistory]
SET [UserId] = c.Id
FROM  [RequestAssignedHistory] a
LEFT JOIN OldUsers b on a.[AssignedTo] = b.Username
LEFT JOIN Users c on c.Email = b.Email
GO

alter table [RequestMessageHistory] add UserId int
GO

UPDATE [RequestMessageHistory]
SET UserId = c.Id
FROM  [RequestMessageHistory] a
LEFT JOIN OldUsers b on a.[Username] = b.Username
LEFT JOIN Users c on b.Email = c.Email
GO


--PRIORITY TABLE
CREATE TABLE Priority (
	Id int IDENTITY(1,1) PRIMARY KEY,
	PriorityName varchar(10) NOT NULL
)
GO

insert into Priority (PriorityName) VALUES ('Low')
go
insert into Priority (PriorityName) VALUES ('Medium')
go
insert into Priority (PriorityName) VALUES ('High')
go

alter table [Requests] add PriorityId int
go

UPDATE [Requests]
SET PriorityId = b.Id
FROM  [Requests] a
LEFT JOIN Priority b on a.Priority = b.PriorityName
go


--CATEGORY TABLE

CREATE TABLE Categories (
	Id int IDENTITY(1,1) PRIMARY KEY,
	CategoryName nvarchar(20) NOT NULL
)
GO

insert into Categories (CategoryName) VALUES ('Incident')
GO
insert into Categories (CategoryName) VALUES ('Change Request')
GO
insert into Categories (CategoryName) VALUES ('Service Request')
GO

alter table [Requests] add CategoryId int
GO

UPDATE [Requests]
SET CategoryId = b.Id
FROM  [Requests] a
LEFT JOIN Categories b on a.Category = b.CategoryName
GO

DELETE FROM Requests WHERE [RequestType] = 'SOP1'
GO


DELETE FROM RequestAssignedHistory WHERE Id IN
(
SELECT a.id FROM RequestAssignedHistory a
  LEFT JOIN Requests b on a.RequestId = b.Id
  where b.id is null
)


--SET USERS PRIMARY KEY
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Users
	(
	Id int NOT NULL IDENTITY (1, 1),
	Email nvarchar(100) NOT NULL,
	Name nvarchar(100) NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Users SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Users ON
GO
IF EXISTS(SELECT * FROM dbo.Users)
	 EXEC('INSERT INTO dbo.Tmp_Users (Id, Email, Name)
		SELECT Id, Email, Name FROM dbo.Users WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Users OFF
GO
DROP TABLE dbo.Users
GO
EXECUTE sp_rename N'dbo.Tmp_Users', N'Users', 'OBJECT' 
GO
ALTER TABLE dbo.Users ADD CONSTRAINT
	PK_Users PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT




ALTER TABLE dbo.RequestAssignedHistory ADD CONSTRAINT
	FK_RequestAssignedHistory_Users FOREIGN KEY
	(
	UserId
	) REFERENCES dbo.Users
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.RequestAssignedHistory ADD CONSTRAINT
	FK_RequestAssignedHistory_Requests FOREIGN KEY
	(
	RequestId
	) REFERENCES dbo.Requests
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO





DELETE FROM RequestMessageHistory WHERE ID IN
(
SELECT a.id
  FROM RequestMessageHistory a
  left join Requests b on a.RequestId = b.id
  where b.id is null
  )
  
  
ALTER TABLE dbo.RequestMessageHistory ADD CONSTRAINT
	FK_RequestMessageHistory_Requests FOREIGN KEY
	(
	RequestId
	) REFERENCES dbo.Requests
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.RequestMessageHistory ADD CONSTRAINT
	FK_RequestMessageHistory_Users FOREIGN KEY
	(
	UserId
	) REFERENCES dbo.Users
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO




DELETE FROM RequestStatusHistory WHERE ID IN (
select a.id from RequestStatusHistory a
LEFT JOIN Requests b on a.RequestId = b.id
where b.id is NULL
)


ALTER TABLE dbo.RequestStatusHistory ADD CONSTRAINT
	FK_RequestStatusHistory_Requests FOREIGN KEY
	(
	RequestId
	) REFERENCES dbo.Requests
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.RequestStatusHistory ADD CONSTRAINT
	FK_RequestStatusHistory_Status FOREIGN KEY
	(
	StatusId
	) REFERENCES dbo.Status
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.RequestStatusHistory ADD CONSTRAINT
	FK_RequestStatusHistory_Users FOREIGN KEY
	(
	UserId
	) REFERENCES dbo.Users
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO





--DROPS al final
ALTER TABLE [Requests] DROP COLUMN RequestedByUsername
GO
ALTER TABLE [Requests] DROP COLUMN RequestedByEmail
GO
ALTER TABLE [Requests] DROP COLUMN RequestedByDisplayName
GO
ALTER TABLE [Requests] DROP COLUMN [System]
GO
ALTER TABLE [Requests] DROP COLUMN [RequestType]
GO

ALTER TABLE [RequestStatusHistory] DROP COLUMN [ChangedByUsername]
GO
ALTER TABLE [RequestStatusHistory] DROP COLUMN [ChangedByDisplayName]
GO
ALTER TABLE [RequestStatusHistory] DROP COLUMN [Status]
GO

ALTER TABLE RequestAssignedHistory DROP COLUMN AssignedTo
GO
ALTER TABLE [RequestMessageHistory] DROP COLUMN [Username]
GO
ALTER TABLE [RequestMessageHistory] DROP COLUMN DisplayName
GO
ALTER TABLE [Requests] DROP COLUMN [Priority]
go
ALTER TABLE [Requests] DROP COLUMN Category
GO
DROP TABLE LOG 
GO
DROP TABLE OLDUserPermissions
GO
DROP TABLE OLDPermissions
GO
DROP TABLE OLDUsers
GO
DROP TABLE SOP1Systems
GO
DROP TABLE SOP1
GO
DROP TABLE Office365EmailGroups
GO


--NO NULLS IN Requests
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Requests
	(
	Id int NOT NULL IDENTITY (1, 1),
	Summary nvarchar(100) NOT NULL,
	Description nvarchar(500) NULL,
	RequestDateTime datetime NOT NULL,
	RequestType nvarchar(50) NOT NULL,
	UserId int NOT NULL,
	ITSystemId int NOT NULL,
	PriorityId int NOT NULL,
	CategoryId int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Requests SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Requests ON
GO
IF EXISTS(SELECT * FROM dbo.Requests)
	 EXEC('INSERT INTO dbo.Tmp_Requests (Id, Summary, Description, RequestDateTime, RequestType, UserId, ITSystemId, PriorityId, CategoryId)
		SELECT Id, Summary, Description, RequestDateTime, RequestType, UserId, ITSystemId, PriorityId, CategoryId FROM dbo.Requests WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Requests OFF
GO
ALTER TABLE dbo.RequestAssignedHistory
	DROP CONSTRAINT FK_RequestAssignedHistory_Requests
GO
ALTER TABLE dbo.RequestMessageHistory
	DROP CONSTRAINT FK_RequestMessageHistory_Requests
GO
ALTER TABLE dbo.RequestStatusHistory
	DROP CONSTRAINT FK_RequestStatusHistory_Requests
GO
DROP TABLE dbo.Requests
GO
EXECUTE sp_rename N'dbo.Tmp_Requests', N'Requests', 'OBJECT' 
GO
ALTER TABLE dbo.Requests ADD CONSTRAINT
	PK_Requests PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RequestStatusHistory ADD CONSTRAINT
	FK_RequestStatusHistory_Requests FOREIGN KEY
	(
	RequestId
	) REFERENCES dbo.Requests
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.RequestStatusHistory SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RequestMessageHistory ADD CONSTRAINT
	FK_RequestMessageHistory_Requests FOREIGN KEY
	(
	RequestId
	) REFERENCES dbo.Requests
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.RequestMessageHistory SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RequestAssignedHistory ADD CONSTRAINT
	FK_RequestAssignedHistory_Requests FOREIGN KEY
	(
	RequestId
	) REFERENCES dbo.Requests
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.RequestAssignedHistory SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


--request foreign keys
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Users SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ITSystems SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Categories SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Requests ADD CONSTRAINT
	FK_Requests_Categories FOREIGN KEY
	(
	CategoryId
	) REFERENCES dbo.Categories
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Requests ADD CONSTRAINT
	FK_Requests_ITSystems FOREIGN KEY
	(
	ITSystemId
	) REFERENCES dbo.ITSystems
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Requests ADD CONSTRAINT
	FK_Requests_Users FOREIGN KEY
	(
	UserId
	) REFERENCES dbo.Users
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Requests SET (LOCK_ESCALATION = TABLE)
GO
COMMIT



ALTER TABLE dbo.Requests ADD CONSTRAINT
	FK_Requests_Priority FOREIGN KEY
	(
	PriorityId
	) REFERENCES dbo.Priority
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO

--nueva tabla de RequestType


--todo: nueva tabla de logs, mover logging a DsK.AuthServer